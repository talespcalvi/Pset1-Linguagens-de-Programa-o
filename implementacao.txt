Implementação do PSET1 
Aluno: Tales Paiva Calvi
Turma: CC4M

	Inicialmente para a implementação do pset1 é pedido para utilizar o filtro de inversão, entretanto antes de realmente trabalhar 
na função 'invertida()' é necessário corrigir erros de outras funções que agem para que essa funcione. A primeira coisa que se percebe é
que a função 'aplicar_por_pixel()' já possui um erro de identação no loop for para o y, esse erro é corrigido acertando o espaçamento da
linha 'resultado.set_pixel(y, x, nova_cor). Outro erro, nessa mesma linha era necessário corrigir os parâmetros que a função recebe, a 
ordem de x e y estavam invertidas sendo corrigida para 'resultado.set_pixel(x, y, nova_cor). Masi um erro está no parâmetros que os loops
for recebem, onde recebem 'resultado.largura' e 'resultado.altura', então é trocado 'resultado' por 'self' em ambos, dentro desse loop
também são apagadas as linhas 'nova_cor = ""' e 'y = ""' pois não são necessárias para o funcionamento do código. Por fim existe um erro
na primeira linha dela onde a posição de largura e altura estão invertidas, é corrigido para 'resultado = Imagem.nova(self.largura, 
self.altura)'.
	Partindo para a função 'get_pixel' é necessário implementar a fórmula de row-major-order para garantir que os pixels sejam
percorridos corretamente, então no return é adcionado essa fórmula, ficando 'return self.pixels[(self.largura * y) + x]'. O mesmo é
preciso na função ficando 'self.pixels[(self.largura * y) + x] = c'.
	Trabalhando na função 'invertida()', a única correção necessária é acertar o valor '256' para '255' que é o intervalo correto de tons de cinza, ficando 'return self.aplicar_por_pixel(lambda c: 255 - c)'.
	Após isso é pedido para implementar uma função para utilizar a correlação de kernels com as imagens que é a forma que se aplica
outros filtros a elas, para implementar essa função chamada 'aplicar_correlação' que recebe uma instância de si mesma(self) e um kernel,
sendo escrito especificando primeiro suas medidas (x, y) e logo após seus valores. Após isso, é necessário calcular o tamanho do kernel
com 'tamanho_kernel = len(kernel) // 2' e depois, e depois é feito o uso de loops para percorrer a imagem e o kernel utilizado. Ainda 
falando do loop para percorrer a imagem, ele é feito assim como na função 'aplicar_pixel()', dentro desse for é setado que a soma é igual
a zero para garantir que o resultado saia corretamente e é feito mais um loop como o anterior para percorrer o kernel, feito da seguint
e forma 'for i in range(len(kernel)):' e dentro desse for 'for j in range(len(kernel[i])):', dentro desse for são calculadas as coordenadas dos pixel vizinhos por meio de 'pixel_x = x - tamanho_kernel + j' e 'pixel_y = y - tamanho_kernel + i' e é calculado produto
entre o valor do pixel e o valor correspondente do kernel por meio de 'soma += self.acertar_borda(pixel_x, pixel_y) * kernel[i][j] '. Por
fim no loop para o x é usada a função 'set_pixel' aplicada a imagem resultada criada no começo da função. A última coisa em relação a
essa função é a adição de uma condicional para o uso de um kernel como tupla ser funcional, isso é feito por meio de um if que caso o
kernel for uma tupla ele será setado como 'kernel = kernel[2]'.
	Apesar dessa função aplicar a correlação corretamente ela infelizmente não garante que todos pixels fiquem dentro limite da 
imagem, por isso deve-se implementar uma função para garantir que isso ocorra. É feita a função 'acertar_borda()', que recebe sua própria
instância, x e y, ela garante que x e y estejam dos limites com os cálculos 'x = max(0, min(x, self.largura - 1))' para x e 'y = max(0,
min(y, self.altura - 1))' para y, por fim retorna a cor na posição (x, y) correta com 'return self.get_pixel(x, y)'.
	Agora para implementar a funcionalidade de borrar a imagem é criada a função 'borrada()', ela utiliza kernels com valores
idênticos que somam 1, e para ter diversos níveis de desfoque é gerado o kernel dentro da função, apenas fornecendo o valor para o
tamanho desejado. A função se inicia recebendo como parâmetro 'self' e um valor 'n' que será para decidir o tamanho do kernel e assim o
nível de desfoque, dentro dela será ajustado o tamanho desse kernel com 'kernel_tamanho = 1 / (n * n)' e criado por meio de um loop da
seguinte forma 'kernel = [[kernel_tamanho for _ in range(n)] for _ in range(n)]', após isso aplica-se a correlação com 'resultado =
self.aplicar_correlacao(kernel)' e aplicar à imagem com 'resultado = resultado.aplicar_por_pixel(lambda c: max(min(round(c), 255), 0))'
utilizando funções para arrendondar os valores e garantir que os valores estejam no intervalo de (0, 255).
	Para a implementação do filtro de nitidez é necessário fazer uma subtração de uma imagem borrada com a imagem original, isso 
resulta na imagem focada, pode ser transcrevida como a fórmula 'Sx,y = round(2Ix,y - Bx,y)' sendo feita para cada pixel. Em código a
função 'focada()' assim como a de desfoque recebe sua própria instância e um valor n para definir o nível de nitidez, começa com a
criação de uma imagem borrada que receberá o mesmo valor de n fornecido nos parâmetros 'img_borrada = self.borrada(n)', é feita uma
função para calcular o novos valores do pixel utilizando a fórmula antes dita, ela recebe o valor do pixel da imagem original e da imagem
borrada, depois aplica o cálculo com 'novo_pixel = (2 * cor - borrada)' e retorna o 'novo_pixel'. Em seguida é preciso aplica-se o
cálculo a cada pixel da imagem, então ele é colocado dentro de um loop for para percorrer a imagem assim como feito nas outras funções,
feito dessa forma dentro do loop 'cor_original = self.get_pixel(x, y)', 'cor_borrada = img_borrada.get_pixel(x, y)', depois é calculado o
novo valor do pixel com 'novo_pixel = calcular_pixel(cor_original, cor_borrada)' e setado o novo valor da imagem, dessa forma o loop
acaba e é feito o filtro de intervalo como anteriormente para garantir os pixels dentro do intervalo (0, 255).
	Por fim o filtro que detecta bordas, este funciona com a combinação de dois kernels específicos e os aplica na fórmula 'Ox,y = 
round(√Ox²x,y + Oy²x,y)'. Em código a função 'bordas()' apenas recebe 'self', dentro dela são feitos os dois kernels necessários,, logo
após é aplicada a correlação a ambos, criada a imagem que será usada o filtro e feito um loop para percorrer a imagem assim nos outros
filtros, dentro desse loop é definido Ox e Oy igual a 'get_pixel()' aplicada a cada kernel com a correlação aplicada e feito o cálculo da
fórmula 'oxy = math.sqrt(ox ** 2 + oy ** 2)', o resultado dessa operação é filtrado para que fique no intervalo correto e um número
inteiro e o resultado é setado com 'set_pixel()'.
	Para a geração do caso de teste foi criado a função 'test_invertida_2()' ela recebe apenas 'self', dentro dela é criada uma
imagem e aplicado o filtro de inversão, é também criado um resultado esperado e comparado o resultado com o resultado esperado com
'self.assertEqual(resultado, esperado)'.
	Dessa maneira está concluída a implementação do pset1, com todos filtros funcionais e casos de testes.
